// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole
  department    String?
  createdOffers BudgetaryOffer[] @relation("CreatedBy")
  approvedOffers BudgetaryOffer[] @relation("ApprovedBy")
  createdPOs    PurchaseOrder[]  @relation("POCreatedBy")
  approvedPOs   PurchaseOrder[]  @relation("POApprovedBy")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

model BudgetaryOffer {
  id                String    @id @default(uuid())
  offerId          String    @unique  // BO/2024/0001
  offerDate        DateTime
  toAuthority      String
  subject          String
  workItems        Json      // Array of work items
  termsConditions  String    @db.Text
  documentUrl      String?   // S3 URL
  documentHash     String?   // For digital signature verification
  status           OfferStatus
  createdBy        User      @relation("CreatedBy", fields: [createdById], references: [id])
  createdById      String
  approver         User?     @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId       String?
  approvalComments  String?   @db.Text
  approvalDate     DateTime?
  approvalHistory  Json[]
  emds             EMD[]     // Add reverse relation
  tags             String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  emailLogs        EmailLog[]
}

enum OfferStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model EmailLog {
  id              String         @id @default(uuid())
  budgetaryOffer  BudgetaryOffer @relation(fields: [budgetaryOfferId], references: [id])
  budgetaryOfferId String
  to              String[]
  cc              String[]
  bcc             String[]
  subject         String
  content         String        @db.Text
  messageId       String?
  status          EmailStatus
  error           String?       @db.Text
  sentAt          DateTime      @default(now())

  @@index([budgetaryOfferId])
}

enum EmailStatus {
  SENT
  FAILED
}

model EMD {
  id              String          @id @default(uuid())
  amount          Float
  paymentMode     String          @default("FDR")
  submissionDate  DateTime        @db.Date
  maturityDate    DateTime        @db.Date
  bankName        String          @default("IDBI")
  documentUrl     String          // S3 URL of FDR document
  extractedData   Json?           // OCR extracted data
  status          EMDStatus
  offer           BudgetaryOffer? @relation(fields: [offerId], references: [id])  // Add relation
  offerId         String?         // Make it optional as EMD might be created before offer
  tags            String[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([offerId])  // Add index for better query performance
}

enum EMDStatus {
  ACTIVE
  EXPIRED
  RELEASED
}

model LOA {
  id              String    @id @default(uuid())
  loaNumber       String    @unique
  loaValue        Float
  deliveryPeriod  Json      // { start: Date, end: Date }
  workDescription String
  documentUrl     String    // S3 URL of LOA document
  amendments      Amendment[]
  purchaseOrders  PurchaseOrder[]
  tags            String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Amendment {
  id              String    @id @default(uuid())
  amendmentNumber String
  documentUrl     String    // S3 URL of amendment document
  loa             LOA       @relation(fields: [loaId], references: [id])
  loaId           String
  tags            String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PurchaseOrder {
  id                String             @id @default(uuid())
  poNumber          String             @unique
  loa               LOA                @relation(fields: [loaId], references: [id])
  loaId             String
  vendor            Vendor             @relation(fields: [vendorId], references: [id])
  vendorId          String
  items             PurchaseOrderItem[] 
  requirementDesc   String
  termsConditions   String             @db.Text
  shipToAddress     String
  baseAmount        Float              @default(0)
  taxAmount         Float              @default(0)
  totalAmount       Float              @default(0)
  notes             String?
  documentUrl       String?
  documentHash      String?
  status            POStatus
  createdBy         User               @relation("POCreatedBy", fields: [createdById], references: [id])
  createdById       String
  approver          User?              @relation("POApprovedBy", fields: [approverId], references: [id])
  approverId        String?
  approvalComments     String?   @db.Text
  rejectionReason   String?   @db.Text
  approvalHistory   Json[]    // Array of approval actions with comments
  tags              String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  item            Item          @relation(fields: [itemId], references: [id])
  itemId          String
  quantity        Float
  unitPrice       Float?         // Price at time of purchase
  totalAmount     Float?         // Calculated total including tax
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([purchaseOrderId])
  @@index([itemId])
}

enum POStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model Vendor {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  mobile        String
  gstin         String?
  address       String
  bankDetails   Json
  items         VendorItem[]
  purchaseOrders PurchaseOrder[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Item {
  id          String    @id @default(uuid())
  name        String
  description String?
  unitPrice   Float
  uom         String    // Unit of Measurement
  hsnCode     String?
  vendors     VendorItem[]
  poItems     PurchaseOrderItem[] // Add this relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VendorItem {
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  vendorId    String
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  unitPrice   Float     // Vendor specific price
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([vendorId, itemId])
}